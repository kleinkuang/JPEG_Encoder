# File:     jpeg_table.py
# Author: 	Lei Kuang
# Date:     08th July 2020
# @ Imperial College London

FDCT2 = [[ 0.35,  0.35,  0.35,  0.35,  0.35,  0.35,  0.35,  0.35],
         [ 0.49,  0.42,  0.28,  0.1,  -0.10, -0.28, -0.42, -0.49],
         [ 0.46,  0.19, -0.19, -0.46, -0.46, -0.19,  0.19,  0.46],
         [ 0.42, -0.10, -0.49, -0.28,  0.28,  0.49,  0.10, -0.42],
         [ 0.35, -0.35, -0.35,  0.35,  0.35, -0.35, -0.35,  0.35],
         [ 0.28, -0.49,  0.10,  0.42, -0.42, -0.10,  0.49, -0.28],
         [ 0.19, -0.46,  0.46, -0.19, -0.19,  0.46, -0.46,  0.19],
         [ 0.10, -0.28,  0.42, -0.49,  0.49, -0.42,  0.28, -0.10]]

FDCT3 = [[ 0.354,  0.354,  0.354,  0.354,  0.354,  0.354,  0.354,  0.354], 
         [ 0.490,  0.416,  0.278,  0.098, -0.098, -0.278, -0.416, -0.490], 
         [ 0.462,  0.191, -0.191, -0.462, -0.462, -0.191,  0.191,  0.462], 
         [ 0.416, -0.098, -0.49,  -0.278,  0.278,  0.490,  0.098, -0.416], 
         [ 0.354, -0.354, -0.354,  0.354,  0.354, -0.354, -0.354,  0.354], 
         [ 0.278, -0.490,  0.098,  0.416, -0.416, -0.098,  0.490, -0.278], 
         [ 0.191, -0.462,  0.462, -0.191, -0.191,  0.462, -0.462,  0.191], 
         [ 0.098, -0.278,  0.416, -0.490,  0.490, -0.416,  0.278, -0.098]]

FDCT4 = [[ 0.3536,  0.3536,  0.3536,  0.3536,  0.3536,  0.3536,  0.3536,  0.3536],
         [ 0.4904,  0.4157,  0.2778,  0.0975, -0.0975, -0.2778, -0.4157, -0.4904],
         [ 0.4619,  0.1913, -0.1913, -0.4619, -0.4619, -0.1913,  0.1913,  0.4619],
         [ 0.4157, -0.0975, -0.4904, -0.2778,  0.2778,  0.4904,  0.0975, -0.4157],
         [ 0.3536, -0.3536, -0.3536,  0.3536,  0.3536, -0.3536, -0.3536,  0.3536],
         [ 0.2778, -0.4904,  0.0975,  0.4157, -0.4157, -0.0975,  0.4904, -0.2778],
         [ 0.1913, -0.4619,  0.4619, -0.1913, -0.1913,  0.4619, -0.4619,  0.1913],
         [ 0.0975, -0.2778,  0.4157, -0.4904,  0.4904, -0.4157,  0.2778, -0.0975]]
         
FDCT8 = [[ 0.35355339,  0.35355339,  0.35355339,  0.35355339,  0.35355339,  0.35355339,  0.35355339,  0.35355339],  
         [ 0.49039264,  0.41573481,  0.27778512,  0.09754516, -0.09754516, -0.27778512, -0.41573481, -0.49039264],  
         [ 0.46193977,  0.19134172, -0.19134172, -0.46193977, -0.46193977, -0.19134172,  0.19134172,  0.46193977],  
         [ 0.41573481, -0.09754516, -0.49039264, -0.27778512,  0.27778512,  0.49039264,  0.09754516, -0.41573481],  
         [ 0.35355339, -0.35355339, -0.35355339,  0.35355339,  0.35355339, -0.35355339, -0.35355339,  0.35355339],  
         [ 0.27778512, -0.49039264,  0.09754516,  0.41573481, -0.41573481, -0.09754516,  0.49039264, -0.27778512],  
         [ 0.19134172, -0.46193977,  0.46193977, -0.19134172, -0.19134172,  0.46193977, -0.46193977,  0.19134172],  
         [ 0.09754516, -0.27778512,  0.41573481, -0.49039264,  0.49039264, -0.41573481,  0.27778512, -0.09754516]]

# REF: ITU-T81, Annex K, P147
# Table K.1 – Luminance quantization table
Q50 = [[ 16,  11,  10,  16,  24,  40,  51, 61],  
        [12,  12,  14,  19,  26,  58,  60, 55], 
        [14,  13,  16,  24,  40,  57,  69, 56], 
        [14,  17,  22,  29,  51,  87,  80, 62],  
        [18,  22,  37,  56,  68, 109, 103, 77], 
        [24,  35,  55,  64,  81, 104, 113, 92], 
        [49,  64,  78,  87, 103, 121, 120, 101], 
        [72,  92,  95,  98, 112, 100, 103,  99]];

# REF: ITU-T81, Annex A, P34
# Figure A.6 – Zig-zag sequence of quantized DCT coefficients
ZIGZAG_SEQ = [  0,  1,  5,  6, 14, 15, 27, 28, \
                2,  4,  7, 13, 16, 26, 29, 42, \
                3,  8, 12, 17, 25, 30, 41, 43, \
                9, 11, 18, 24, 31, 40, 44, 53, \
               10, 19, 23, 32, 39, 45, 52, 54, \
               20, 22, 33, 38, 46, 51, 55, 60, \
               21, 34, 37, 47, 50, 56, 59, 61, \
               35, 36, 48, 49, 57, 58, 62, 63];

# REF: ITU-T81, Annex K, P153
# Table K.3 – Table for luminance DC coefficient differences
# {Category: (Code length, Code word)}
HUFFMAN_TABLE_DC = \
{
    0x0: (  2, 0b00),
    0x1: (  3, 0b010), 
    0x2: (  3, 0b011), 
    0x3: (  3, 0b100), 
    0x4: (  3, 0b101), 
    0x5: (  3, 0b110), 
    0x6: (  4, 0b1110), 
    0x7: (  5, 0b11110), 
    0x8: (  6, 0b111110), 
    0x9: (  7, 0b1111110), 
    0xA: (  8, 0b11111110), 
    0xB: (  9, 0b111111110), 
};

# REF: ITU-T81, Annex K, P154
# Table K.5 – Table for luminance AC coefficients (sheet 1 of 4)
# {Run/Size: (Code length, Code word)}
HUFFMAN_TABLE_AC = \
{
    0x00: (  4, 0b1010), 
    0x01: (  2, 0b00), 
    0x02: (  2, 0b01), 
    0x03: (  3, 0b100), 
    0x04: (  4, 0b1011), 
    0x05: (  5, 0b11010), 
    0x06: (  7, 0b1111000), 
    0x07: (  8, 0b11111000), 
    0x08: ( 10, 0b1111110110), 
    0x09: ( 16, 0b1111111110000010), 
    0x0A: ( 16, 0b1111111110000011), 
    
    0x11: (  4, 0b1100), 
    0x12: (  5, 0b11011), 
    0x13: (  7, 0b1111001), 
    0x14: (  9, 0b111110110), 
    0x15: ( 11, 0b11111110110), 
    0x16: ( 16, 0b1111111110000100), 
    0x17: ( 16, 0b1111111110000101), 
    0x18: ( 16, 0b1111111110000110), 
    0x19: ( 16, 0b1111111110000111), 
    0x1A: ( 16, 0b1111111110001000), 
    
    0x21: (  5, 0b11100), 
    0x22: (  8, 0b11111001), 
    0x23: ( 10, 0b1111110111), 
    0x24: ( 12, 0b111111110100), 
    0x25: ( 16, 0b1111111110001001), 
    0x26: ( 16, 0b1111111110001010), 
    0x27: ( 16, 0b1111111110001011), 
    0x28: ( 16, 0b1111111110001100), 
    0x29: ( 16, 0b1111111110001101), 
    0x2A: ( 16, 0b1111111110001110), 
    
    0x31: (  6, 0b111010), 
    0x32: (  9, 0b111110111), 
    0x33: ( 12, 0b111111110101), 
    0x34: ( 16, 0b1111111110001111), 
    0x35: ( 16, 0b1111111110010000), 
    0x36: ( 16, 0b1111111110010001), 
    0x37: ( 16, 0b1111111110010010), 
    0x38: ( 16, 0b1111111110010011), 
    0x39: ( 16, 0b1111111110010100), 
    0x3A: ( 16, 0b1111111110010101), 
    
    0x41: (  6, 0b111011), 
    0x42: ( 10, 0b1111111000), 
    0x43: ( 16, 0b1111111110010110), 
    0x44: ( 16, 0b1111111110010111), 
    0x45: ( 16, 0b1111111110011000), 
    0x46: ( 16, 0b1111111110011001), 
    0x47: ( 16, 0b1111111110011010), 
    0x48: ( 16, 0b1111111110011011), 
    0x49: ( 16, 0b1111111110011100), 
    0x4A: ( 16, 0b1111111110011101),
    
    0x51: (  7, 0b1111010), 
    0x52: ( 11, 0b11111110111), 
    0x53: ( 16, 0b1111111110011110), 
    0x54: ( 16, 0b1111111110011111), 
    0x55: ( 16, 0b1111111110100000), 
    0x56: ( 16, 0b1111111110100001), 
    0x57: ( 16, 0b1111111110100010), 
    0x58: ( 16, 0b1111111110100011), 
    0x59: ( 16, 0b1111111110100100), 
    0x5A: ( 16, 0b1111111110100101),

    0x61: (  7, 0b1111011), 
    0x62: ( 12, 0b111111110110), 
    0x63: ( 16, 0b1111111110100110), 
    0x64: ( 16, 0b1111111110100111), 
    0x65: ( 16, 0b1111111110101000), 
    0x66: ( 16, 0b1111111110101001), 
    0x67: ( 16, 0b1111111110101010), 
    0x68: ( 16, 0b1111111110101011), 
    0x69: ( 16, 0b1111111110101100), 
    0x6A: ( 16, 0b1111111110101101),

    0x71: (  8, 0b11111010), 
    0x72: ( 12, 0b111111110111), 
    0x73: ( 16, 0b1111111110101110), 
    0x74: ( 16, 0b1111111110101111), 
    0x75: ( 16, 0b1111111110110000), 
    0x76: ( 16, 0b1111111110110001), 
    0x77: ( 16, 0b1111111110110010), 
    0x78: ( 16, 0b1111111110110011), 
    0x79: ( 16, 0b1111111110110100), 
    0x7A: ( 16, 0b1111111110110101),

    0x81: (  9, 0b111111000), 
    0x82: ( 15, 0b111111111000000), 
    0x83: ( 16, 0b1111111110110110), 
    0x84: ( 16, 0b1111111110110111), 
    0x85: ( 16, 0b1111111110111000), 
    0x86: ( 16, 0b1111111110111001), 
    0x87: ( 16, 0b1111111110111010), 
    0x88: ( 16, 0b1111111110111011), 
    0x89: ( 16, 0b1111111110111100), 
    0x8A: ( 16, 0b1111111110111101),

    0x91: (  9, 0b111111001), 
    0x92: ( 16, 0b1111111110111110), 
    0x93: ( 16, 0b1111111110111111), 
    0x94: ( 16, 0b1111111111000000), 
    0x95: ( 16, 0b1111111111000001), 
    0x96: ( 16, 0b1111111111000010), 
    0x97: ( 16, 0b1111111111000011), 
    0x98: ( 16, 0b1111111111000100), 
    0x99: ( 16, 0b1111111111000101), 
    0x9A: ( 16, 0b1111111111000110),

    0xA1: (  9, 0b111111010), 
    0xA2: ( 16, 0b1111111111000111), 
    0xA3: ( 16, 0b1111111111001000), 
    0xA4: ( 16, 0b1111111111001001), 
    0xA5: ( 16, 0b1111111111001010), 
    0xA6: ( 16, 0b1111111111001011), 
    0xA7: ( 16, 0b1111111111001100), 
    0xA8: ( 16, 0b1111111111001101), 
    0xA9: ( 16, 0b1111111111001110), 
    0xAA: ( 16, 0b1111111111001111),
    
    0xB1: ( 10, 0b1111111001), 
    0xB2: ( 16, 0b1111111111010000), 
    0xB3: ( 16, 0b1111111111010001), 
    0xB4: ( 16, 0b1111111111010010), 
    0xB5: ( 16, 0b1111111111010011), 
    0xB6: ( 16, 0b1111111111010100), 
    0xB7: ( 16, 0b1111111111010101), 
    0xB8: ( 16, 0b1111111111010110), 
    0xB9: ( 16, 0b1111111111010111), 
    0xBA: ( 16, 0b1111111111011000),
    
    0xC1: ( 10, 0b1111111010), 
    0xC2: ( 16, 0b1111111111011001), 
    0xC3: ( 16, 0b1111111111011010), 
    0xC4: ( 16, 0b1111111111011011), 
    0xC5: ( 16, 0b1111111111011100), 
    0xC6: ( 16, 0b1111111111011101), 
    0xC7: ( 16, 0b1111111111011110), 
    0xC8: ( 16, 0b1111111111011111), 
    0xC9: ( 16, 0b1111111111100000), 
    0xCA: ( 16, 0b1111111111100001),
    
    
    0xD1: ( 11, 0b11111111000), 
    0xD2: ( 16, 0b1111111111100010), 
    0xD3: ( 16, 0b1111111111100011), 
    0xD4: ( 16, 0b1111111111100100), 
    0xD5: ( 16, 0b1111111111100101), 
    0xD6: ( 16, 0b1111111111100110), 
    0xD7: ( 16, 0b1111111111100111), 
    0xD8: ( 16, 0b1111111111101000), 
    0xD9: ( 16, 0b1111111111101001), 
    0xDA: ( 16, 0b1111111111101010),
    
    0xE1: ( 16, 0b1111111111101011), 
    0xE2: ( 16, 0b1111111111101100), 
    0xE3: ( 16, 0b1111111111101101), 
    0xE4: ( 16, 0b1111111111101110), 
    0xE5: ( 16, 0b1111111111101111), 
    0xE6: ( 16, 0b1111111111110000), 
    0xE7: ( 16, 0b1111111111110001), 
    0xE8: ( 16, 0b1111111111110010), 
    0xE9: ( 16, 0b1111111111110011), 
    0xEA: ( 16, 0b1111111111110100),
    
    0xF0: ( 11, 0b11111111001),
    0xF1: ( 16, 0b1111111111110101), 
    0xF2: ( 16, 0b1111111111110110), 
    0xF3: ( 16, 0b1111111111110111), 
    0xF4: ( 16, 0b1111111111111000), 
    0xF5: ( 16, 0b1111111111111001), 
    0xF6: ( 16, 0b1111111111111010), 
    0xF7: ( 16, 0b1111111111111011), 
    0xF8: ( 16, 0b1111111111111100), 
    0xF9: ( 16, 0b1111111111111101), 
    0xFA: ( 16, 0b1111111111111110),
};

if __name__ == "__main__":
#    for rrrr in range(0, 0xF+1):
#        print()
#        for ssss in range(0, 0xA+1):
#            try:
#                sel = rrrr<<4 | ssss
#                (len, val) = HUFFMAN_TABLE_AC[sel]
#                print("        8'h%s:   len = 5'd%s;" % (hex(sel)[2:].upper().zfill(2), len))
#            except:
#                pass
    print()
    n = 0
    for r in Q50:
        for c in r:
            print("assign Q50 [%2d] = 8'd%d;" % (n, c))
            n = n + 1
